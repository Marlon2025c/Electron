"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublisherGithub = void 0;
const publisher_base_1 = require("@electron-forge/publisher-base");
const fs_extra_1 = __importDefault(require("fs-extra"));
const mime_types_1 = __importDefault(require("mime-types"));
const github_1 = __importDefault(require("./util/github"));
const no_release_error_1 = __importDefault(require("./util/no-release-error"));
class PublisherGithub extends publisher_base_1.PublisherBase {
    constructor() {
        super(...arguments);
        this.name = 'github';
    }
    async publish({ makeResults, setStatusLine }) {
        const { config } = this;
        const perReleaseArtifacts = {};
        for (const makeResult of makeResults) {
            const release = makeResult.packageJSON.version;
            if (!perReleaseArtifacts[release]) {
                perReleaseArtifacts[release] = [];
            }
            perReleaseArtifacts[release].push(makeResult);
        }
        if (!(config.repository && typeof config.repository === 'object' && config.repository.owner && config.repository.name)) {
            throw new Error('In order to publish to GitHub, you must set the "repository.owner" and "repository.name" properties in your Forge config. See the docs for more info');
        }
        const github = new github_1.default(config.authToken, true, config.octokitOptions);
        const octokit = github.getGitHub();
        for (const releaseVersion of Object.keys(perReleaseArtifacts)) {
            let release;
            const artifacts = perReleaseArtifacts[releaseVersion];
            const releaseName = `${config.tagPrefix ?? 'v'}${releaseVersion}`;
            setStatusLine(`Searching for target release: ${releaseName}`);
            try {
                release = (await github.getGitHub().repos.listReleases({
                    owner: config.repository.owner,
                    repo: config.repository.name,
                    per_page: 100,
                })).data.find((testRelease) => testRelease.tag_name === releaseName);
                if (!release) {
                    throw new no_release_error_1.default(404);
                }
            }
            catch (err) {
                if (err instanceof no_release_error_1.default && err.code === 404) {
                    // Release does not exist, let's make it
                    release = (await github.getGitHub().repos.createRelease({
                        owner: config.repository.owner,
                        repo: config.repository.name,
                        tag_name: releaseName,
                        name: releaseName,
                        draft: config.draft !== false,
                        prerelease: config.prerelease === true,
                        generate_release_notes: config.generateReleaseNotes === true,
                    })).data;
                }
                else {
                    // Unknown error
                    throw err;
                }
            }
            let uploaded = 0;
            const updateUploadStatus = () => {
                setStatusLine(`Uploading distributable (${uploaded}/${artifacts.length} to ${releaseName})`);
            };
            updateUploadStatus();
            await Promise.all(artifacts
                .flatMap((artifact) => artifact.artifacts)
                .map(async (artifactPath) => {
                const done = () => {
                    uploaded += 1;
                    updateUploadStatus();
                };
                const artifactName = github_1.default.sanitizeName(artifactPath);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                const asset = release.assets.find((item) => item.name === artifactName);
                if (asset !== undefined) {
                    if (config.force === true) {
                        await github.getGitHub().repos.deleteReleaseAsset({
                            owner: config.repository.owner,
                            repo: config.repository.name,
                            asset_id: asset.id,
                        });
                    }
                    else {
                        return done();
                    }
                }
                await github.getGitHub().repos.uploadReleaseAsset({
                    owner: config.repository.owner,
                    repo: config.repository.name,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    release_id: release.id,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    url: release.upload_url,
                    // https://github.com/octokit/rest.js/issues/1645
                    data: (await fs_extra_1.default.readFile(artifactPath)),
                    headers: {
                        'content-type': mime_types_1.default.lookup(artifactPath) || 'application/octet-stream',
                        'content-length': (await fs_extra_1.default.stat(artifactPath)).size,
                    },
                    name: artifactName,
                });
                return done();
            }));
        }
    }
}
exports.default = PublisherGithub;
exports.PublisherGithub = PublisherGithub;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHVibGlzaGVyR2l0aHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1B1Ymxpc2hlckdpdGh1Yi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtRUFBaUY7QUFHakYsd0RBQTBCO0FBQzFCLDREQUE4QjtBQUc5QiwyREFBbUM7QUFDbkMsK0VBQXFEO0FBVXJELE1BQXFCLGVBQWdCLFNBQVEsOEJBQW9DO0lBQWpGOztRQUNFLFNBQUksR0FBRyxRQUFRLENBQUM7SUFrSGxCLENBQUM7SUFoSEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQW9CO1FBQzVELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFeEIsTUFBTSxtQkFBbUIsR0FFckIsRUFBRSxDQUFDO1FBRVAsS0FBSyxNQUFNLFVBQVUsSUFBSSxXQUFXLEVBQUU7WUFDcEMsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7WUFDL0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNqQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDbkM7WUFDRCxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0M7UUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLE9BQU8sTUFBTSxDQUFDLFVBQVUsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0SCxNQUFNLElBQUksS0FBSyxDQUNiLHNKQUFzSixDQUN2SixDQUFDO1NBQ0g7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLGNB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